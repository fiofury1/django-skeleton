"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# For getting Environment Variables
# --- Snip from "Two Scoops of Django" ---
# Normally you should not import ANYTHING from Django directly
# into your settings, but ImproperlyConfigured is an exception.
from django.core.exceptions import ImproperlyConfigured

def get_env_variable(var_name):
    """Get the environment variable or return exception."""
    try:
        return os.environ[var_name]
    except KeyError:
        error_msg = f'Set the {var_name} environment variable'
        raise ImproperlyConfigured(error_msg)

# --- End Snip ---
def string_int_to_int(var):
    """Convert strings of integers to integers, but keep all other types the same."""
    try:
        return int(var)
    except ValueError:
        return var
# End 'For Environment Variables'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_variable('DJANGO_SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(get_env_variable('DJANGO_DEBUG')))

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'dj-skel.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    #Tells Django to use 'whitenoise' in development rather than Django default.
    'whitenoise.runserver_nostatic',    
    'django.contrib.staticfiles',

    # Third-party apps

    # Local apps
    'accounts',
    'main',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #Tells Django where to find templates outside of apps.
        'DIRS': [BASE_DIR / 'templates',],
        #Tells Django to serch for templates in apps.
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

#Database setting for SQLite
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

#Database settings for PostgreSQL
# DATABASES = {
#     'default': {
#         'ENGINE': get_env_variable('DB_ENGINE'),
#         'NAME': get_env_variable('DB_NAME'),
#         'USER': get_env_variable('DB_USER'),
#         'PASSWORD': get_env_variable('DB_PASSWORD'),
#         'HOST': get_env_variable('DB_HOST'),
#         'PORT': string_int_to_int(get_env_variable('DB_PORT')),
#     }
#  }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Tells Django where to check for static files other than apps in development.
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Tells Django where to store static files collected using 'manage.py collectstatic' command
# Location of static files during production. 
STATIC_ROOT = BASE_DIR / 'staticfiles'

#Specifies the 'file collection engine' used by collectstatic.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' 


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Tells Django to use custom user model we defined in 'accounts' app
AUTH_USER_MODEL = 'accounts.CustomUser'

# Tells where to redirect upon login and logout
LOGIN_REDIRECT_URL = 'main:index'
LOGOUT_REDIRECT_URL = 'main:index'

# Email
# To Mail to Console
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# To Use SMTP
EMAIL_BACKEND = get_env_variable('EMAIL_BACKEND')
DEFAULT_FROM_EMAIL = get_env_variable('DEFAULT_FROM_EMAIL')
EMAIL_HOST = get_env_variable('EMAIL_HOST')
EMAIL_HOST_USER = get_env_variable('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = get_env_variable('EMAIL_HOST_PASSWORD')
EMAIL_PORT = string_int_to_int(get_env_variable('EMAIL_PORT'))
EMAIL_USE_TLS = bool(int(get_env_variable('EMAIL_USE_TLS')))

#For security
SECURE_SSL_REDIRECT=bool(int(get_env_variable('SECURE_SSL_REDIRECT')))
SECURE_HSTS_SECONDS=int(get_env_variable('SECURE_HSTS_SECONDS'))
SECURE_HSTS_INCLUDE_SUBDOMAINS=bool(int(get_env_variable('SECURE_HSTS_INCLUDE_SUBDOMAINS')))
SECURE_HSTS_PRELOAD=bool(int(get_env_variable('SECURE_HSTS_PRELOAD')))
SESSION_COOKIE_SECURE=bool(int(get_env_variable('SESSION_COOKIE_SECURE')))
CSRF_COOKIE_SECURE=bool(int(get_env_variable('CSRF_COOKIE_SECURE')))